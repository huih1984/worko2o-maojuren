<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">
    <display-name>worko2o</display-name>
    <distributable/>
    <!--和apache共享session -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    <servlet>
        <servlet-name>coreServlet</servlet-name>
        <servlet-class>
            com.delta.worko2o.action.CoreServlet
        </servlet-class>
    </servlet>
    <!-- url-pattern中配置的/coreServlet用于指定该Servlet的访问路径 -->
    <servlet-mapping>
        <servlet-name>coreServlet</servlet-name>
        <url-pattern>/core</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>Messages</servlet-name>
        <servlet-class>com.delta.worko2o.action.Messages</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Messages</servlet-name>
        <url-pattern>/Messages</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>com.delta.worko2o.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>
    <!--将 Nutz.mvc 挂载到 Tomcat中 -->
    <filter>
        <filter-name>nutz</filter-name>
        <filter-class>org.nutz.mvc.NutFilter</filter-class>
        <init-param>
            <param-name>modules</param-name>
            <param-value>com.delta.worko2o.action.MainModule</param-value>
        </init-param>
        <init-param>
            <param-name>exclusions</param-name>
            <!-- *.XXX 忽略后缀 -->
            <!-- /XX/* 忽略前缀 -->
            <!-- /cc   忽略固定路径 -->
            <!-- 下面的例子忽略了html和ftl后缀, 忽略了/rs/和/druid/前缀,和忽略了固定路径/abc/notaction -->
            <param-value>*.html,*.jsp,*.ftl,/rs/*,/druid/*,/abc/notaction</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>nutz</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>Security Filter</filter-name>
        <filter-class>com.delta.worko2o.util.SecurityFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>Security Filter</filter-name>
        <url-pattern>/jsp/employer/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>Security Filter</filter-name>
        <url-pattern>/jsp/hunter/*</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>Security Filter</filter-name>
        <url-pattern>/jsp/questionnaire/*</url-pattern>
    </filter-mapping>
    <welcome-file-list>
        <welcome-file>/login.jsp</welcome-file>
    </welcome-file-list>
    <error-page>
        <error-code>404</error-code>
        <location>/404.jsp</location>
    </error-page>
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>login</servlet-name>
        <servlet-class>com.delta.worko2o.action.LoginServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>login</servlet-name>
        <!--  业界标准 用.do后缀来表示 controler  -->
        <url-pattern>/login.do</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>afterlogin</servlet-name>
        <servlet-class>com.delta.worko2o.action.AfterLoginRedirectServlet</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>envelopeChatListServlet</servlet-name>
        <servlet-class>com.delta.worko2o.action.EnvelopeChatListServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>envelopeChatListServlet</servlet-name>
        <!--  业界标准 用.do后缀来表示 controler  -->
        <url-pattern>/envelopechatlist</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>afterlogin</servlet-name>
        <!--  业界标准 用.do后缀来表示 controler  -->
        <url-pattern>/afterlogin.do</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>uploadFileServlet</servlet-name>
        <servlet-class>com.delta.worko2o.action.UploadFileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>uploadFileServlet</servlet-name>
        <!--  业界标准 用.do后缀来表示 controler  -->
        <url-pattern>/uploadfileservlet</url-pattern>
    </servlet-mapping>
    <!--<listener>-->
    <!--<listener-class>com.delta.worko2o.util.EscapeXmlELResolverListener</listener-class>-->
    <!--</listener>-->
    <listener>
        <listener-class>com.github.pukkaone.jsp.EscapeXmlELResolverListener</listener-class>
    </listener>
    <listener>
        <listener-class>org.directwebremoting.servlet.DwrListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>dwr-invoker</servlet-name>
        <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>

        <init-param>
            <param-name>fileUploadMaxBytes</param-name>
            <param-value>25000</param-value>
        </init-param>

        <!-- This should NEVER be present in live -->
        <init-param>
            <param-name>debug</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>accessLogLevel</param-name>
            <param-value>runtimeexception</param-value>
        </init-param>

        <!-- Remove this unless you want to use active reverse ajax -->
        <init-param>
            <param-name>activeReverseAjaxEnabled</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- By default DWR creates application scope objects when they are first
        used. This creates them when the app-server is started -->
        <init-param>
            <param-name>initApplicationScopeCreatorsAtStartup</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- WARNING: allowing JSON-RPC connections bypasses much of the security
        protection that DWR gives you. Take this out if security is important -->
        <init-param>
            <param-name>jsonRpcEnabled</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- WARNING: allowing JSONP connections bypasses much of the security
        protection that DWR gives you. Take this out if security is important -->
        <init-param>
            <param-name>jsonpEnabled</param-name>
            <param-value>true</param-value>
        </init-param>

        <!-- data: URLs are good for small images, but are slower, and could OOM for
        larger images. Leave this out (or keep 'false') for anything but small images -->
        <init-param>
            <param-name>preferDataUrlSchema</param-name>
            <param-value>false</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>dwr-invoker</servlet-name>
        <url-pattern>/dwr/*</url-pattern>
    </servlet-mapping>
</web-app>